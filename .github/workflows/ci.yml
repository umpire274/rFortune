name: Build and Upload Artifacts

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

jobs:
  build:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            ext: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: zip

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Rust Target
        run: rustup target add ${{ matrix.target }}

      - name: Build Release Binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build Package
        shell: bash
        run: |
          # Set global artifacts directory
          export ARTIFACTS_DIR="$PWD/release_artifacts"
          mkdir -p "$ARTIFACTS_DIR"
          
          # Build package
          cd target/${{ matrix.target }}/release
          mkdir -p rfortune-${{ matrix.target }}
          cp rfortune rfortune-${{ matrix.target }}/ 2>/dev/null || cp rfortune.exe rfortune-${{ matrix.target }}/
          cp $GITHUB_WORKSPACE/README.md $GITHUB_WORKSPACE/CHANGELOG.md $GITHUB_WORKSPACE/LICENSE rfortune-${{ matrix.target }}/

      - name: Package Windows Binary
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Path assoluti per evitare problemi
          $baseDir = $pwd
          $artifactsDir = "$baseDir/release_artifacts"
          $targetDir = "$baseDir/target/${{ matrix.target }}/release"
          
          # Lavora nella directory di build
          Push-Location $targetDir
          
          try {
            # Prepara la directory del pacchetto
            $packageDir = "rfortune-${{ matrix.target }}"
            $zipPath = "$artifactsDir/rfortune-${{ matrix.target }}.zip"
            Compress-Archive -Path "$packageDir/*" -DestinationPath $zipPath -CompressionLevel Optimal
          
            Write-Host "ZIP creato correttamente in $zipPath"
          }
          finally {
            # Torna sempre alla directory originale
            Pop-Location
          }

      - name: Compress with tar on Unix
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          export ARTIFACTS_DIR="$PWD/release_artifacts"
          cd target/${{ matrix.target }}/release
          tar -czvf $ARTIFACTS_DIR/rfortune-${{ matrix.target }}.tar.gz rfortune-${{ matrix.target }}

      - name: Checksum and Sign Package
        shell: bash
        run: |
          # Setup GPG (once for all operations)
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 --decode | gpg --batch --import
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          gpgconf --kill gpg-agent
          gpgconf --launch gpg-agent

          export ARTIFACTS_DIR="$PWD/release_artifacts"        
          cd "$ARTIFACTS_DIR"
          
          # Generate checksums
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows checksum (PowerShell)
            pwsh -Command '
              $file = "rfortune-${{ matrix.target }}.zip"
              $hash = (Get-FileHash -Algorithm SHA256 $file).Hash.ToLower()
              "$hash *$file" | Out-File -Encoding utf8 "$file.sha256"
            '
          else
            # Unix checksum
            sha256sum rfortune-${{ matrix.target }}.* > rfortune-${{ matrix.target }}.sha256 || 
            shasum -a 256 rfortune-${{ matrix.target }}.* > rfortune-${{ matrix.target }}.sha256
          fi
          
          # Sign artifacts (works for all platforms)
          for f in rfortune-${{ matrix.target }}.*; do
            [[ "$f" == *.sig || "$f" == *.sha256 ]] && continue
            gpg --batch --yes --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
                --output "$f.sig" --detach-sign "$f"
          done

      - name: Clean Previous Artifacts
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            for (const artifact of artifacts.artifacts) {
              if (artifact.name.startsWith('release_artifacts')) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
              }
            }

      - name: <Debug>Contenuto della directory release_artifacts</Debug>
        shell: bash
        run: |
          echo "Contenuto di release_artifacts/"
          ls -l release_artifacts
          echo ""
          echo "Checksum dei file:"
          sha256sum release_artifacts/* || shasum -a 256 release_artifacts/*

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release_artifacts-${{ matrix.target }}
          path: release_artifacts/*

      - name: <Debug>Verifica upload effettivo</Debug>
        shell: bash
        run: |
          echo "Workflow triggering this run:"
          echo "Workflow name: ${{ github.event.workflow.name }}"
          echo "Workflow run ID: ${{ github.event.workflow_run.id }}"

          echo -e "\nContenuto della directory di lavoro"
          ls -lah .
          
          echo -e "\nControllo cartelle Artifact note:"
          ls -R ${{ github.workspace }}/release_artifacts || echo "Cartella non trovata"
          
          echo -e "\nFine debug. Nota: l'upload effettivo degli artifact Ã¨ gestito da GitHub come archivio separato."
          echo "I file caricati non vengono spostati o rimossi: puoi ispezionarli ancora nel filesystem locale."
