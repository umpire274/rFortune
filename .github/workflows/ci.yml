name: Build and Upload Artifacts

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            ext: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package binary and resources
        shell: bash
        run: |
          mkdir -p release_artifacts/${{ matrix.target }}
          cd target/${{ matrix.target }}/release
          mkdir -p rfortune-${{ matrix.target }}
          cp rfortune rfortune-${{ matrix.target }}/ 2>/dev/null || cp rfortune.exe rfortune-${{ matrix.target }}/
          cp $GITHUB_WORKSPACE/README.md $GITHUB_WORKSPACE/CHANGELOG.md $GITHUB_WORKSPACE/LICENSE rfortune-${{ matrix.target }}/

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            powershell -Command "Compress-Archive -Path rfortune-${{ matrix.target }} -DestinationPath rfortune-${{ matrix.target }}.zip"
            cp rfortune-${{ matrix.target }}.zip $GITHUB_WORKSPACE/release_artifacts/${{ matrix.target }}/
          else
            tar -czvf rfortune-${{ matrix.target }}.tar.gz rfortune-${{ matrix.target }}
            cp rfortune-${{ matrix.target }}.tar.gz $GITHUB_WORKSPACE/release_artifacts/${{ matrix.target }}/
          fi

      - name: Generate SHA256 checksum
        shell: bash
        run: |
          cd release_artifacts/${{ matrix.target }}
          file="rfortune-${{ matrix.target }}.${{ matrix.ext }}"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            pwsh -Command '
              $file = "'"$file"'"
              $hash = (Get-FileHash -Algorithm SHA256 $file).Hash.ToLower()
              "$hash *$file" | Out-File -Encoding utf8 "$file.sha256"
            '
          else
            sha256sum "$file" > "$file.sha256" || shasum -a 256 "$file" > "$file.sha256"
          fi

      - name: Sign with GPG
        shell: bash
        run: |
          cd release_artifacts/${{ matrix.target }}
          file="rfortune-${{ matrix.target }}.${{ matrix.ext }}"

          echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --import

          echo "$GPG_PASSPHRASE" | gpg --batch --yes --passphrase-fd 0 \
            --pinentry-mode loopback \
            --output "$file.sig" --detach-sign "$file"
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

  upload-artifacts:
    name: Upload All Artifacts
    runs-on: ubuntu-latest
    needs: build
    if: ${{ always() }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: DEBUG - List All objetcs into working dir
        shell: bash
        run: |
          echo "[DEBUG] Listing working directory" 
          ls -lah . 

      - name: Download all build artifacts from matrix
        uses: actions/download-artifact@v4
        with:
          pattern: release_artifacts-*
          path: temp_download
          merge-multiple: true

      - name: DEBUG - verifica cosa è stato scaricato
        shell: bash
        run: |
          echo "[DEBUG] Contenuto di temp_download:"
          find temp_download || echo "temp_download è vuota o non trovata"

      - name: Move all platform builds into one folder
        shell: bash
        run: |
          mkdir release_artifacts
          find temp_download -type f -name "rfortune-*" -exec cp {} release_artifacts/ \;

      - name: Upload combined artifacts for release
        uses: actions/upload-artifact@v4
        with:
          name: release_artifacts
          path: release_artifacts
