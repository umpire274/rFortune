name: Build and Upload Artifacts

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

jobs:
  build:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            ext: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: zip

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Rust Target
        run: rustup target add ${{ matrix.target }}

      - name: Build Release Binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package Binary
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          mkdir -p rfortune-${{ matrix.target }}
          cp rfortune rfortune-${{ matrix.target }}/ 2>/dev/null || cp rfortune.exe rfortune-${{ matrix.target }}/
          cp $GITHUB_WORKSPACE/README.md $GITHUB_WORKSPACE/CHANGELOG.md $GITHUB_WORKSPACE/LICENSE rfortune-${{ matrix.target }}/
          tar -czvf rfortune-${{ matrix.target }}.${{ matrix.ext }} rfortune-${{ matrix.target }} 2>/dev/null || zip -r rfortune-${{ matrix.target }}.${{ matrix.ext }} rfortune-${{ matrix.target }}

      - name: Generate Checksum (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          cd release_artifacts
          if command -v sha256sum >/dev/null; then
            sha256sum rfortune-${{ matrix.target }}.* > rfortune-${{ matrix.target }}.sha256
          else
            shasum -a 256 rfortune-${{ matrix.target }}.* > rfortune-${{ matrix.target }}.sha256
          fi

      - name: Generate Checksum (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd release_artifacts
          $file = "rfortune-${{ matrix.target }}.zip"
          $hash = (Get-FileHash -Algorithm SHA256 $file).Hash.ToLower()
          "$hash *$file" | Out-File -Encoding utf8 "$file.sha256"

      - name: Setup GPG
        shell: bash
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 --decode | gpg --batch --import
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          gpgconf --kill gpg-agent
          gpgconf --launch gpg-agent

      - name: Sign Artifacts (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          cd release_artifacts
          for f in rfortune-${{ matrix.target }}.*; do
            [[ "$f" == *.sig ]] && continue
            gpg --batch --yes --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
                --output "$f.sig" --detach-sign "$f"
          done

      - name: Sign Artifacts (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd release_artifacts
          $passphrase = "${{ secrets.GPG_PASSPHRASE }}"
          $files = Get-ChildItem -File | Where-Object { $_.Name -like "rfortune-${{ matrix.target }}.*" -and $_.Name -notlike "*.sig" }
          foreach ($file in $files) {
            gpg --batch --yes --passphrase "$passphrase" --output "$($file.Name).sig" --detach-sign $file.Name
          }

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release_artifacts
          path: release_artifacts/*